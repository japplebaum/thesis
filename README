This is the code used to generate and process data for Sam DeFabbia-Kane's
undergraduate honors thesis. For certain parts of the code to run, numpy
and matplotlib must be installed.

PYTHON CODE

'TorCtl' is a copy of the Python TorCtl library for interfacing with Tor
processes over the Tor Control protocol.

'bigfloat' is a copy of the Python library 'bigfloat', which is used for
one implementation of Murdoch and Zielinski's algorithm.

autotor.py contains classes for starting and controlling Tor processes
and also some helper functions for generating some of the graphs used
in Chapter 3. Autotor requires that there be a 'hack_tor' executable
available on the path in order to function--this executable should be
a version of Tor that logs data the user wants to be able to see.
Autotor also requires that the tool 'proxychains' be installed to
route requests through Tor. proxychains.conf is included as the
configuration file that proxychains will use.

runtor.py contains a general helper function for running correlation
tests.

circstart.py contains functions for graphing circuit start times, which
are used in Chapter 3.

bayesian.py contains functions for performing Murdoch and Zielinski's
correlation algorithm.

levine.py contains functions for performing Levine et al's correlation
algorithm.

newcorr.py contains a function for performing our simplified correlation
algorithm.

graph.py contains functions for graphing correlation results, and was
used to generate the results in Chapter 4.

analyze.py contains helper functions for running correlation on multiple
circuits at once.


COFFEESCRIPT CODE

client.coffee, con.coffee, ping.coffee, and srvclient.coffee are simple
application clients and servers used to generate some of the traffic
for testing. CoffeeScript must be installed to compile them, and NodeJS
must be installed to run the compiled JavaScript.
